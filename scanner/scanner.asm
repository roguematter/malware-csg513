section .data
	msg_infected db "detected infection",10
	msg_infected_len dd $-msg_infected
section .text
	global _start
_start:
	pop ebx
	pop ebx
;ebx has filename ptr
	pop ebx
;open file for reading
	mov eax,5
	xor ecx,ecx
	xor edx,edx
	int 0x80
	mov ebx,eax
;read phoff
	mov eax,19
	mov ecx,28
	mov edx,0
	int 0x80
	mov eax,3
	mov edx,4
	push dword 0
	mov ecx,esp
	int 0x80
;read phentsz and phentnum
	mov eax,19
	mov ecx,42
	mov edx,0
	int 0x80
	mov eax,3
	mov edx,2
	push dword 0
	mov ecx,esp
	int 0x80
	mov eax,3
	push dword 0
	mov ecx,esp
	int 0x80
;edi has phentnum
;esi has phentsz
	pop edi
	pop esi
	sub esi,4
;offset to first phent
	mov eax,19
	mov edx,0
	pop ecx
	int 0x80
	mov ebp,esp
;read phent type
_readphenttype:
	mov eax,3
	mov edx,4
	push dword 0
	mov ecx,esp
	int 0x80
	pop eax
	cmp eax,1
	je _testphentoff
	dec edi
	cmp edi,0
	je _exitpassone
	mov eax,19
	mov ecx,esi
	mov edx,1
	int 0x80
	jmp _readphenttype
_testphentoff:
	mov eax,3
	push dword 0
	mov ecx,esp
	int 0x80
	pop eax
	cmp eax,0
	jne _readaddrtostacktop
	cmp ebp,esp
	je _readaddrtosz
	mov eax,3
	push dword 0
	mov ecx,esp
	int 0x80
	pop eax
	sub ebp,4
	mov edx,[ebp]
	mov [ebp],eax
	push edx
	mov eax,19
	mov ecx,4
	mov edx,1
	int 0x80
	mov eax,3
	mov edx,4
	push dword 0
	mov ecx,esp
	int 0x80
	pop eax
	sub ebp,4
	mov edx,[ebp]
	mov [ebp],eax
	push edx
	mov eax,19
	mov ecx,esi
	sub ecx,16
	mov edx,1
	int 0x80
	jmp _readphenttype
_readaddrtosz:
	mov eax,3
	push dword 0
	mov ecx,esp
	int 0x80
	mov eax,19
	mov ecx,4
	mov edx,1
	int 0x80
	mov eax,3
	mov edx,4
	push dword 0
	mov ecx,esp
	int 0x80
	sub ebp,8
	mov eax,19
	mov ecx,esi
	sub ecx,16
	mov edx,1
	int 0x80
	jmp _readphenttype
_readaddrtostacktop:
	mov eax,3
	push dword 0
	mov ecx,esp
	int 0x80
	mov eax,19
	mov ecx,esi
	sub ecx,8
	mov edx,1
	int 0x80
	jmp _readphenttype
_exitpassone:
	mov edx,[ebp]
	mov ecx,[ebp+4]
	add edx,ecx
;while esp != ebp, check condition
_testcondition:
	cmp ebp,esp
	je _done
	pop eax
	sub eax,edx
	cmp eax,0x1000
	jl _infected
	jmp _testcondition
_infected:
	mov esi,ebx
	mov ebx,1
	mov eax,4
	mov edx,[msg_infected_len]
	mov ecx,msg_infected
	int 0x80
	mov ebx,esi
_cleanup:
	cmp ebp,esp
	je _done
	pop eax
	jmp _cleanup
_done:
_exit:
	mov eax,6
	int 0x80
	mov eax,1
	xor ebx,ebx
	int 0x80
